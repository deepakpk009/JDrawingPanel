/* -----------------------------------
 * JDrawingPanel v0.2
 * -------------------------------------
 * a drawing panel module in java using swing for hand written input based projects.
 * -------------------------------------
 * Developed By : deepak pk
 * Email : deepakpk009@yahoo.in
 * -------------------------------------
 * This Project is Licensed under LGPL
 * -------------------------------------
 *
 This program is free software: you can redistribute it and/or modify
 it under the terms of the GNU Lesser General Public License as published by
 the Free Software Foundation, either version 3 of the License, or
 (at your option) any later version.

 This program is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 GNU Lesser General Public License for more details.

 You should have received a copy of the GNU Lesser General Public License
 along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
package com.deepak.jdrawingpanel;

import java.awt.BasicStroke;
import java.awt.Color;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Point;
import java.awt.image.BufferedImage;
import java.util.ArrayList;

/**
 *
 * @author deepak
 */
public class JDrawingPanel extends javax.swing.JPanel {

    // point array object to hold all the drawn points
    private ArrayList<Point> drawingCoordinates = null;
    // the drawing image
    private BufferedImage drawing = null;
    // temp image to store drawing while canvas resize
    private BufferedImage temp = null;
    // the drawing graphics object
    private Graphics2D drawingGraphics = null;
    // the drawing color object
    private Color drawingColor = null;
    // the stroke size
    private float strokeSize = 0.0f;
    // the canvas color object
    private Color canvasColor = null;
    // variables to store mouse coordiantes
    private int x1 = 0, y1 = 0, x2 = 0, y2 = 0;

    /**
     * Creates new form JDrawingPanel
     */
    public JDrawingPanel() {
        initComponents();
        // set the default drawing color
        drawingColor = Color.black;
        // set the default canvas color
        canvasColor = Color.white;
        // set the default stroke size
        strokeSize = 3.0f;
        // create the point array
        this.drawingCoordinates = new ArrayList<>();
    }

    /*
     * parametrized constructor with the drawing color, canvas color and the stroke size
     * as parameters
     */
    public JDrawingPanel(Color drawingColor, Color canvasColor, float strokeSize) {
        initComponents();
        // set the drawing color
        this.drawingColor = drawingColor;
        // set teh canvas color
        this.canvasColor = canvasColor;
        // set the stroke size
        this.strokeSize = strokeSize;
        // create the point array
        this.drawingCoordinates = new ArrayList<>();
    }

    /*
     * override the paint method to draw the drawn image
     */
    @Override
    public void paint(Graphics g) {
        super.paint(g);
        // draw the drawn image
        g.drawImage(drawing, 0, 0, this);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setBackground(new java.awt.Color(255, 255, 255));
        setForeground(new java.awt.Color(0, 0, 0));
        addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                formMousePressed(evt);
            }
        });
        addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentResized(java.awt.event.ComponentEvent evt) {
                formComponentResized(evt);
            }
        });
        addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                formMouseDragged(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    /*
     * method called when the mouse is dragged along the panel
     */
    private void formMouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseDragged
        // TODO add your handling code here:
        // set the coordinates
        x2 = evt.getX();
        y2 = evt.getY();
        // call the draw function
        draw();
        // reset last location to the current location
        x1 = x2;
        y1 = y2;
        // add the location to the point array
        drawingCoordinates.add(evt.getPoint());
    }//GEN-LAST:event_formMouseDragged

    /*
     * method called when the panel is resized 
     * this event is being listned so as to initilise and resize the drawing image
     */
    private void formComponentResized(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_formComponentResized
        // TODO add your handling code here:
        // if the drawing image is not null then store the current image to temp
        if (drawing != null) {
            temp = drawing;
        }
        // create a new drawing with new resolution
        drawing = new BufferedImage(this.getWidth(), this.getHeight(), BufferedImage.TYPE_INT_ARGB);
        // get the graphics object
        drawingGraphics = drawing.createGraphics();
        // set the canvas color to the graphics object
        drawingGraphics.setColor(canvasColor);
        // flood the drawing with the canvas color
        drawingGraphics.fillRect(0, 0, drawing.getWidth(), drawing.getHeight());
        // set the drawing color to the graphics object
        drawingGraphics.setColor(drawingColor);
        // set the stroke to graphics object
        drawingGraphics.setStroke(new BasicStroke(strokeSize));
        // draw the previous image onto the new image
        drawingGraphics.drawImage(temp, 0, 0, this);
        // reset the temp image
        temp = null;
    }//GEN-LAST:event_formComponentResized

    /*
     * method called when the mouse is pressed on the panel
     */
    private void formMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMousePressed
        // TODO add your handling code here:
        // set the coordinates
        x1 = evt.getX();
        y1 = evt.getY();
        // set the last coordinates same as the current coordinates
        x2 = x1;
        y2 = y1;
        // call the draw function
        draw();
        // add the location to the point array
        drawingCoordinates.add(evt.getPoint());
    }//GEN-LAST:event_formMousePressed

    /*
     * method to draw onto the drawing image
     */
    private void draw() {
        // draw a line 
        drawingGraphics.drawLine(x1, y1, x2, y2);
        // repaint the panel
        repaint();
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables

    /*
     * GETTERS FOR THE DRAWING CLASS VARIABLES
     */
    public BufferedImage getDrawing() {
        return drawing;
    }

    public Color getDrawingColor() {
        return drawingColor;
    }

    public Float getStrokeSize() {
        return strokeSize;
    }

    public Color getCanvasColor() {
        return canvasColor;
    }

    public ArrayList<Point> getDrawingCoordinates() {
        return drawingCoordinates;
    }

    // method to clear the drawing
    public void clearDrawing() {
        drawingCoordinates.clear();
        // set the canvas color to the graphics object
        drawingGraphics.setColor(canvasColor);
        // flood the drawing with the canvas color
        drawingGraphics.fillRect(0, 0, drawing.getWidth(), drawing.getHeight());
        // set the drawing color to the graphics object
        drawingGraphics.setColor(drawingColor);
        // repaint the panel
        repaint();
    }
}
